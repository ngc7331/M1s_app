From fd95a76b356aff0f5b73638d544c1ffc81a19643 Mon Sep 17 00:00:00 2001
From: ngc7331 <ngc7331@outlook.com>
Date: Sun, 19 Nov 2023 22:21:03 +0800
Subject: [PATCH 3/6] feat: parse http response in SDK for e907

- the original http header string will not be passed to c906 core (only http body will be)
- `m1s_xram_wifi_http_response` returns http status code now (-1 for error, 0 for incomplete request)
- `m1s_xram_wifi_http_response` 2nd argument is pointer now
  - the input value should still be buffer size
  - the output value will be the real bytes write into buf
---
 .../include/m1s_c906_xram_wifi.h              |  2 +-
 .../m1s_c906_xram/src/m1s_c906_xram_wifi.c    | 20 ++++----
 .../m1s_e907_xram/src/m1s_e907_xram_wifi.c    | 49 +++++++++++++++----
 .../m1s_common_xram/m1s_common_xram_wifi.h    | 14 ++++--
 4 files changed, 62 insertions(+), 23 deletions(-)

diff --git a/components/sipeed/c906/m1s_c906_xram/include/m1s_c906_xram_wifi.h b/components/sipeed/c906/m1s_c906_xram/include/m1s_c906_xram_wifi.h
index 789292c..1f6eaf4 100644
--- a/components/sipeed/c906/m1s_c906_xram/include/m1s_c906_xram_wifi.h
+++ b/components/sipeed/c906/m1s_c906_xram/include/m1s_c906_xram_wifi.h
@@ -11,6 +11,6 @@ int m1s_xram_wifi_connect(char *ssid, char *passwd);
 int m1s_xram_wifi_disconnect(void);
 int m1s_xram_wifi_upload_stream(char *ip, uint32_t port);
 int m1s_xram_wifi_http_request(const char *host, uint16_t port, const char *uri);
-int m1s_xram_wifi_http_response(char *buf, int bufsize);
+int m1s_xram_wifi_http_response(char *buf, int *len);
 void m1s_c906_xram_wifi_operation_handle(uint32_t len);
 #endif
diff --git a/components/sipeed/c906/m1s_c906_xram/src/m1s_c906_xram_wifi.c b/components/sipeed/c906/m1s_c906_xram/src/m1s_c906_xram_wifi.c
index 18f9bbe..44db3a2 100644
--- a/components/sipeed/c906/m1s_c906_xram/src/m1s_c906_xram_wifi.c
+++ b/components/sipeed/c906/m1s_c906_xram/src/m1s_c906_xram_wifi.c
@@ -85,6 +85,7 @@ static enum {
 } http_request_status = HTTP_REQUEST_STATUS_IDLE;
 static char *http_response_buf = NULL;
 static int http_response_len = 0;
+static int http_response_code = 0;
 
 int m1s_xram_wifi_http_request(const char *host, uint16_t port, const char *uri) {
     if (http_request_status != HTTP_REQUEST_STATUS_IDLE) return -1;
@@ -96,26 +97,26 @@ int m1s_xram_wifi_http_request(const char *host, uint16_t port, const char *uri)
     return m1s_xram_wifi_operation(&op, XRAM_WIFI_HTTP_REQUEST);
 }
 
-int m1s_xram_wifi_http_response(char *buf, int bufsize) {
+int m1s_xram_wifi_http_response(char *buf, int *len) {
     if (http_request_status == HTTP_REQUEST_STATUS_IDLE) {
         printf("m1s_xram_wifi_http_response: still IDLE, do not call this before m1s_xram_wifi_http_request()\r\n");
-        return 0;
+        return -1;
     } else if (http_request_status == HTTP_REQUEST_STATUS_SENT) {
         // printf("m1s_xram_wifi_http_response: waiting for response\r\n");
-        return -1;
+        return 0;
     } else if (http_request_status == HTTP_REQUEST_STATUS_ERROR) {
         printf("m1s_xram_wifi_http_response: ERROR acknowledged\r\n");
         http_request_status = HTTP_REQUEST_STATUS_IDLE;
-        return 0;
+        return -1;
     }
 
-    int nread = bufsize < http_response_len ? bufsize : http_response_len;
-    strncpy(buf, http_response_buf, nread);
+    *len = *len < http_response_len ? *len : http_response_len;
+    strncpy(buf, http_response_buf, *len);
 
     http_response_len = 0;
     vPortFree(http_response_buf);
     http_request_status = HTTP_REQUEST_STATUS_IDLE;
-    return nread;
+    return http_response_code;
 }
 /****************************************************************************
  *                               Recv Handle
@@ -133,14 +134,15 @@ static int xram_wifi_http_response(m1s_xram_wifi_t *op) {
     }
 
     /* respond */
-    if (op->http_response.error) {
+    if (op->http_response.code == 0) {
         http_request_status = HTTP_REQUEST_STATUS_ERROR;
         printf("xram_wifi_http_response: error occured\r\n");
         goto ok;
     }
 
     http_response_len = op->http_response.len;
-    printf("xram_wifi_http_response: received %d\r\n", http_response_len);
+    http_response_code = op->http_response.code;
+    printf("xram_wifi_http_response: received %d bytes\r\n", http_response_len);
     http_response_buf = pvPortMalloc(http_response_len);
     if (http_response_buf == NULL) {
         printf("xram_wifi_http_response: alloc buffer error\r\n");
diff --git a/components/sipeed/e907/m1s_e907_xram/src/m1s_e907_xram_wifi.c b/components/sipeed/e907/m1s_e907_xram/src/m1s_e907_xram_wifi.c
index 46ca1f4..d6b5b76 100644
--- a/components/sipeed/e907/m1s_e907_xram/src/m1s_e907_xram_wifi.c
+++ b/components/sipeed/e907/m1s_e907_xram/src/m1s_e907_xram_wifi.c
@@ -305,6 +305,7 @@ static int xram_wifi_upload_stream(m1s_xram_wifi_t *op)
 }
 
 #define HTTP_REQUEST_BUFSIZE 1024
+#define HTTP_REQUEST_ENABLE_LOG
 static int xram_wifi_http_request(m1s_xram_wifi_t *op)
 {
     struct xram_hdr hdr = {
@@ -314,13 +315,17 @@ static int xram_wifi_http_request(m1s_xram_wifi_t *op)
     };
     m1s_xram_wifi_t resp = {
         .op = XRAM_WIFI_HTTP_RESPONSE,
-        .http_response.len = 0,
-        .http_response.error = 0,
+        .http_response = {
+            .version = {0, 0},
+            .code = 0,
+            .type = {0},
+            .len  = 0,
+        }
     };
     uint32_t bytes;
 
     /* alloc buffer */
-    uint8_t *buf = pvPortMalloc(HTTP_REQUEST_BUFSIZE);
+    char *buf = pvPortMalloc(HTTP_REQUEST_BUFSIZE);
     if (NULL == buf) {
         printf("xram_wifi_http_request: alloc buffer error\r\n");
         hdr.err = WIFI_OP_ERR;
@@ -367,9 +372,11 @@ static int xram_wifi_http_request(m1s_xram_wifi_t *op)
     }
 
     // construct HTTP packet
-    ret = snprintf((char *) buf, HTTP_REQUEST_BUFSIZE,
+    // TODO: support PUT/OPTION/DELETE
+    // TODO: headers
+    ret = snprintf(buf, HTTP_REQUEST_BUFSIZE,
         "%s %s HTTP/1.1\r\nHOST: %s\r\n\r\n\r\n\r\n",
-        "GET", // TODO: support PUT/OPTION/DELETE
+        "GET",
         op->http_request.uri, op->http_request.host
     );
 
@@ -388,19 +395,44 @@ static int xram_wifi_http_request(m1s_xram_wifi_t *op)
         goto fail;
     }
 
+#ifdef HTTP_REQUEST_ENABLE_LOG
+    printf("xram_wifi_http_request: recv %d bytes\r\n", ret);
+#endif
+
     // close socket
     closesocket(sock);
 
+    // destruct HTTP packet
+    // TODO: cookies, etc.
+    char *pbuf = buf;
+    sscanf(buf, "HTTP/%hd.%hd %d", &resp.http_response.version.major, &resp.http_response.version.minor, &resp.http_response.code);
+#ifdef HTTP_REQUEST_ENABLE_LOG
+    printf("xram_wifi_http_request: found HTTP version %hd.%hd, status %d\r\n", resp.http_response.version.major, resp.http_response.version.minor, resp.http_response.code);
+#endif
+    do {
+        while (*(pbuf++) != '\n') ; // goto next line
+        if (sscanf(pbuf, "Content-Type: %s\r\n", resp.http_response.type) == 1) {
+#ifdef HTTP_REQUEST_ENABLE_LOG
+            printf("xram_wifi_http_request: found Content-Type: %s\r\n", resp.http_response.type);
+#endif
+        }
+        if (sscanf(pbuf, "Content-Length: %d\r\n", &resp.http_response.len) == 1) {
+#ifdef HTTP_REQUEST_ENABLE_LOG
+            printf("xram_wifi_http_request: found Content-Length: %d\r\n", resp.http_response.len);
+#endif
+        }
+    } while (*pbuf != '\r'); // until empty line
+    pbuf += 2; // skip empty line
+
     // pass response to C906 core through XRAM
     hdr.len = sizeof(m1s_xram_wifi_t);
-    resp.http_response.len = ret;
     bytes  = XRAMRingWrite(XRAM_OP_QUEUE, &hdr, sizeof(struct xram_hdr));
     bytes += XRAMRingWrite(XRAM_OP_QUEUE, &resp, sizeof(m1s_xram_wifi_t));
-    bytes += XRAMRingWrite(XRAM_OP_QUEUE, buf, ret);
+    bytes += XRAMRingWrite(XRAM_OP_QUEUE, pbuf, resp.http_response.len);
 
     // free buffer
     vPortFree(buf);
-    if (bytes != sizeof(struct xram_hdr) + sizeof(m1s_xram_wifi_t) + ret) {
+    if (bytes != sizeof(struct xram_hdr) + sizeof(m1s_xram_wifi_t) + resp.http_response.len) {
         printf("xram ring write err.\r\n");
         return WIFI_OP_ERR;
     }
@@ -413,7 +445,6 @@ fail:
 
     // send response
     hdr.len = sizeof(m1s_xram_wifi_t);
-    resp.http_response.error = 1;
     bytes  = XRAMRingWrite(XRAM_OP_QUEUE, &hdr, sizeof(struct xram_hdr));
     bytes += XRAMRingWrite(XRAM_OP_QUEUE, &resp, sizeof(m1s_xram_wifi_t));
 
diff --git a/components/sipeed/m1s_common_xram/m1s_common_xram_wifi.h b/components/sipeed/m1s_common_xram/m1s_common_xram_wifi.h
index bd3246d..4f974f1 100644
--- a/components/sipeed/m1s_common_xram/m1s_common_xram_wifi.h
+++ b/components/sipeed/m1s_common_xram/m1s_common_xram_wifi.h
@@ -34,13 +34,19 @@ struct m1s_xram_wifi {
         struct {
             char host[32];
             uint16_t port;
-            char uri[64];
+            char uri[80];
         } __attribute__((packed)) http_request;
 
         struct {
-            int len;
-            int error;
-        }  __attribute__((packed)) http_response;
+            struct {
+                short major;
+                short minor;
+            } __attribute__((packed)) version;
+            int code;     // http status code
+            char type[32]; // content-type
+            int len;       // content-length
+            // content will be sent after this struct
+        } __attribute__((packed)) http_response;
     };
 } __attribute__((packed));
 typedef struct m1s_xram_wifi m1s_xram_wifi_t;
-- 
2.34.1

